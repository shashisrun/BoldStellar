{"ast":null,"code":"import API from './../ApiCall';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Routing from '../Routing';\nimport { setLoginTrue, setLoginFalse } from './LoginStatus';\nexport const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_FAILURE = 'FETCH_USER_FAILURE';\n\nconst fetchUserRequest = () => {\n  return {\n    type: FETCH_USER_REQUEST\n  };\n};\n\nconst fetchUserSucces = userDetail => {\n  return {\n    type: FETCH_USER_SUCCESS,\n    payload: userDetail\n  };\n};\n\nconst fetchUserFailure = error => {\n  return {\n    type: FETCH_USER_FAILURE,\n    payload: error\n  };\n};\n\nexport const fetchUser = error => {\n  return dispatch => {\n    dispatch(fetchUserRequest);\n    API('user').then(res => {\n      const userDetail = res.data;\n      dispatch(setLoginTrue());\n      dispatch(fetchUserSucces(userDetail));\n    }).catch(error => {\n      const errorMsg = error.message;\n      dispatch(setLoginFalse());\n      dispatch(fetchUserFailure(error));\n    });\n  };\n};\nconst initialState = {\n  loading: false,\n  user: {\n    id: '',\n    email: '',\n    name: '',\n    permissions: ''\n  },\n  error: ''\n};\nexport const userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_USER_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case FETCH_USER_SUCCESS:\n      return { ...state,\n        loading: false,\n        user: action.payload,\n        error: ''\n      };\n\n    case FETCH_USER_FAILURE:\n      return { ...state,\n        loading: false,\n        user: [],\n        error: ''\n      };\n      break;\n\n    default:\n      return state;\n      break;\n  }\n};\n\nfunction MapStateToProps(state) {\n  return {\n    userDetail: state.userDetail\n  };\n}\n\nfunction MapDispactchToProps(state) {\n  return bindActionCreators(fetchUser, dispatch);\n}\n\nconst user = connect(MapStateToProps, MapDispactchToProps)(Routing);","map":{"version":3,"sources":["/var/www/html/boldstellar/src/Services/ReduxServices/User.js"],"names":["API","bindActionCreators","connect","Routing","setLoginTrue","setLoginFalse","FETCH_USER_REQUEST","FETCH_USER_SUCCESS","FETCH_USER_FAILURE","fetchUserRequest","type","fetchUserSucces","userDetail","payload","fetchUserFailure","error","fetchUser","dispatch","then","res","data","catch","errorMsg","message","initialState","loading","user","id","email","name","permissions","userReducer","state","action","MapStateToProps","MapDispactchToProps"],"mappings":"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","sourcesContent":["import API from './../ApiCall';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Routing from '../Routing';\nimport {setLoginTrue, setLoginFalse} from './LoginStatus';\n\nexport const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_FAILURE = 'FETCH_USER_FAILURE';\n\nconst fetchUserRequest = () => {\n    return {\n        type: FETCH_USER_REQUEST\n    }\n}\n\nconst fetchUserSucces = userDetail => {\n    return {\n        type: FETCH_USER_SUCCESS,\n        payload: userDetail\n    }\n}\n\nconst fetchUserFailure = error => {\n    return {\n        type: FETCH_USER_FAILURE,\n        payload: error\n    }\n}\n\nexport const fetchUser = error => {\n    return (dispatch) => {\n        dispatch(fetchUserRequest);\n        API('user')\n        .then(res => {\n            const userDetail = res.data;\n            dispatch(setLoginTrue());\n            dispatch(fetchUserSucces(userDetail));\n        })\n        .catch(error => {\n            const errorMsg = error.message;\n            dispatch(setLoginFalse());\n            dispatch(fetchUserFailure(error));\n        })\n    }\n}\n\nconst initialState = {\n    loading: false,\n    user: {\n        id: '',\n        email: '',\n        name: '',\n        permissions: ''\n    },\n    error: ''\n}\n\nexport const userReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_USER_REQUEST: return {\n            ...state,\n            loading: true\n        }\n\n        case FETCH_USER_SUCCESS: return {\n            ...state,\n            loading: false,\n            user: action.payload,\n            error: ''\n        }\n\n        case FETCH_USER_FAILURE: return {\n            ...state,\n            loading: false,\n            user: [],\n            error: ''\n        }\n            \n            break;\n    \n        default: return state\n            break;\n    }\n}\n\n\nfunction MapStateToProps(state) {\n    return{\n        userDetail: state.userDetail\n    }\n}\n\nfunction MapDispactchToProps(state) {\n    return bindActionCreators(fetchUser, dispatch);\n}\n\nconst user = connect(MapStateToProps, MapDispactchToProps)(Routing);"]},"metadata":{},"sourceType":"module"}